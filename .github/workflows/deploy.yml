# https://medium.com/devops-techable/build-docker-image-with-github-actions-and-push-it-to-amazon-ecr-d4e739472284

name: Deploy to ECR

on:
  push:
    branches:
     - 'main'

jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
     - name: Refresh Terraform
       id: terraform_refresh
       uses: fjogeleit/http-request-action@v1
       with:
         url: 'https://thisper.levantine.io/run_terraform'
         method: 'POST'
         customHeaders: '{"Content-Type": "application/json"}'
         data: '{"auth_usr": "github", "auth_key": "${{ secrets.JENKINS_AUTH_KEY }}", "services": "real-estate"}'
         timeout: 600000 # 10 minutes

     - name: Terraform Results
       run: |
        echo ${{ steps.terraform_refresh.outputs.response }}

     - name: Check out code
       uses: actions/checkout@v2

     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
         aws-region: us-west-2

     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1

     - name: Build, tag, and push image to Amazon ECR
       env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
         ECR_REPOSITORY: real-estate
         IMAGE_TAG: bmt-image-${{github.run_number}}
       run: |
         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

     - name: Deploy Container
       id: deploy_container
       uses: fjogeleit/http-request-action@v1
       with:
         url: 'https://thisper.levantine.io/deploy_container'
         method: 'POST'
         customHeaders: '{"Content-Type": "application/json"}'
         data: '{"auth_usr": "github", "auth_key": "${{ secrets.JENKINS_AUTH_KEY }}", "services": "real-estate"}'
         timeout: 600000 # 10 minutes

     - name: Container Deployment Results
       run: |
         echo ${{ steps.deploy_container.outputs.response }}